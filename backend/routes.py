from flask import Blueprint, request, jsonify
from firebase_helper import get_db
import base64
import tempfile
import os
import json

from helper_functions import transcribe_audio, process_transcription
from firebase_helper import insert_processed_json

bp = Blueprint('responses', __name__)


# Define route for testing
@bp.route('/test', methods=['GET'])
def test():
    return jsonify({'message': 'Hello, World!'}), 200


@bp.route('/responses', methods=['POST'])
def add_response():
    """
    Adds a new emergency response. The unique ID is generated by Firebase.
    """
    # Check if the request contains audio data
    if 'audio' in request.files:
        # Get the audio file from the request
        audio_file = request.files['audio']
        
        # Read the audio file and create a tuple with the filename, stream, and content type
        audio_tuple = (audio_file.filename, audio_file.stream, audio_file.content_type)
        
        # Transcribe the audio file
        try:
            process_input_text = transcribe_audio(audio_tuple)
        except Exception as e:
            return jsonify({'error': 'Transcription failed', 'details': str(e)}), 500
    elif "text" in request.json:
        # Get the text data from the request
        process_input_text = request.json["text"]
    
    # Process the transcription to generate structured content
    try:
        response_json = process_transcription(process_input_text)
    except Exception as e:
        return jsonify({'error': 'Content generation failed', 'details': str(e)}), 500
    
    # Insert the processed JSON into the Firebase Realtime Database
    try:
        new_response_key = insert_processed_json(response_json)
    except Exception as e:
        return jsonify({'error': 'Database insertion failed', 'details': str(e)}), 500

    # Return the response key and a success message
    return new_response_key, 200

@bp.route('/responses/<response_id>', methods=['PUT'])
def update_response(response_id):
    """
    Updates an existing emergency response with the provided data.
    """
    data = request.json
    if not data:
        return jsonify({'error': 'No data provided'}), 400

    response_ref = get_db().child(response_id)
    if not response_ref.get():
        return jsonify({'error': 'Response not found'}), 404

    response_ref.update(data)
    return jsonify({'message': 'Response updated'}), 200

@bp.route('/responses/<response_id>', methods=['DELETE'])
def delete_response(response_id):
    """
    Deletes an existing emergency response.
    """
    response_ref = get_db().child(response_id)
    if not response_ref.get():
        return jsonify({'error': 'Response not found'}), 404

    response_ref.delete()
    return jsonify({'message': 'Response deleted'}), 200

@bp.route('/responses', methods=['GET'])
def get_responses():
    """
    Retrieves all emergency responses.
    """
    responses = get_db().get()
    return jsonify(responses if responses else {}), 200
